#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('execute-python:server');
const http = require('http');
const { exec } = require("child_process");
const { spawn } = require('child_process');
let childProcess = {}
let PID;




/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
const io = require('socket.io').listen(server)
io.on('connection', socket=>{
  socket.emit("connected", "connected");
  socket.on("yr", data=>{
    console.log(data)
  })
  socket.on("exec", data=>{
		var child = spawn('python3',['scripts/run.py']); 
    childProcess = child;
    PID = child.pid
		// use event hooks to provide a callback to execute when data are available: 
		child.stdout.on('data', function(data) {
			// console.log(data.toString()); 
			
			socket.emit("stdout",data.toString())
		});
  });
  socket.on("kill", data=>{
		// exec(`kill PID  ${PID} `, (error, stdout, stderr)=>{
		// 	if(error){socket.emit("kill_error", {error}); console.log(error)}
		// 	else if(stdout){socket.emit("kill_done", "kill_done"); console.log(stdout)}
		// 	else{socket.emit("kill_error",{stderr}); console.log(stderr)}
		// });
		childProcess.kill()
		socket.emit("kill_done", "kill_done")
	});
})

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
